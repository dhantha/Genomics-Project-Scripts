Settings:
  Output files: "/scratch/dag332/ant_genome//ant_genome_db.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  /home/dag332/Bio/Project/genomes/ant_genome/combined_ants_full.fasta
Building a SMALL index
Reading reference sizes
  Time reading reference sizes: 00:00:01
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:01
bmax according to bmaxDivN setting: 19082181
Using parameters --bmax 14311636 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 14311636 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:02
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:01
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:05
Splitting and merging
  Splitting and merging time: 00:00:00
Split 2, merged 6; iterating...
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:05
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 1; iterating...
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:04
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 9.54109e+06 (target: 14311635)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 8
  Reserving size (14311636) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:01
  Sorting block of length 11572708
  (Using difference cover)
  Sorting block time: 00:00:04
Returning block of 11572709
Getting block 2 of 8
  Reserving size (14311636) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:02
  Sorting block of length 10983995
  (Using difference cover)
  Sorting block time: 00:00:03
Returning block of 10983996
Getting block 3 of 8
  Reserving size (14311636) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:01
  Sorting block of length 7199984
  (Using difference cover)
  Sorting block time: 00:00:03
Returning block of 7199985
Getting block 4 of 8
  Reserving size (14311636) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:02
  Sorting block of length 10420325
  (Using difference cover)
  Sorting block time: 00:00:03
Returning block of 10420326
Getting block 5 of 8
  Reserving size (14311636) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:02
  Sorting block of length 14267589
  (Using difference cover)
  Sorting block time: 00:00:04
Returning block of 14267590
Getting block 6 of 8
  Reserving size (14311636) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:02
  Sorting block of length 3527785
  (Using difference cover)
  Sorting block time: 00:00:01
Returning block of 3527786
Getting block 7 of 8
  Reserving size (14311636) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:02
  Sorting block of length 11082483
  (Using difference cover)
  Sorting block time: 00:00:03
Returning block of 11082484
Getting block 8 of 8
  Reserving size (14311636) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:01
  Sorting block of length 7273849
  (Using difference cover)
  Sorting block time: 00:00:02
Returning block of 7273850
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 24249162
fchr[G]: 38119744
fchr[T]: 52010290
fchr[$]: 76328725
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 29709770 bytes to primary EBWT file: /scratch/dag332/ant_genome//ant_genome_db.1.bt2
Wrote 19082188 bytes to secondary EBWT file: /scratch/dag332/ant_genome//ant_genome_db.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 76328725
    bwtLen: 76328726
    sz: 19082182
    bwtSz: 19082182
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 4770546
    offsSz: 19082184
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 397546
    numLines: 397546
    ebwtTotLen: 25442944
    ebwtTotSz: 25442944
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:01:04
Reading reference sizes
  Time reading reference sizes: 00:00:01
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:01
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 19082181
Using parameters --bmax 14311636 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 14311636 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:02
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:01
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:05
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 6; iterating...
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:05
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 1; iterating...
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:04
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 1; iterating...
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:05
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 1.09041e+07 (target: 14311635)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 7
  Reserving size (14311636) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:01
  Sorting block of length 13896868
  (Using difference cover)
  Sorting block time: 00:00:04
Returning block of 13896869
Getting block 2 of 7
  Reserving size (14311636) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:02
  Sorting block of length 10006450
  (Using difference cover)
  Sorting block time: 00:00:03
Returning block of 10006451
Getting block 3 of 7
  Reserving size (14311636) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:02
  Sorting block of length 12067590
  (Using difference cover)
  Sorting block time: 00:00:03
Returning block of 12067591
Getting block 4 of 7
  Reserving size (14311636) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:02
  Sorting block of length 11198674
  (Using difference cover)
  Sorting block time: 00:00:03
Returning block of 11198675
Getting block 5 of 7
  Reserving size (14311636) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:02
  Sorting block of length 12336259
  (Using difference cover)
  Sorting block time: 00:00:03
Returning block of 12336260
Getting block 6 of 7
  Reserving size (14311636) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:02
  Sorting block of length 11490421
  (Using difference cover)
  Sorting block time: 00:00:03
Returning block of 11490422
Getting block 7 of 7
  Reserving size (14311636) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:01
  Sorting block of length 5332457
  (Using difference cover)
  Sorting block time: 00:00:02
Returning block of 5332458
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 24249162
fchr[G]: 38119744
fchr[T]: 52010290
fchr[$]: 76328725
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 29709770 bytes to primary EBWT file: /scratch/dag332/ant_genome//ant_genome_db.rev.1.bt2
Wrote 19082188 bytes to secondary EBWT file: /scratch/dag332/ant_genome//ant_genome_db.rev.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 76328725
    bwtLen: 76328726
    sz: 19082182
    bwtSz: 19082182
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 4770546
    offsSz: 19082184
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 397546
    numLines: 397546
    ebwtTotLen: 25442944
    ebwtTotSz: 25442944
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:01:04
